datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator client {
  seed     = "node prisma/seed.js"
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String       @id @default(cuid())
  name                   String?
  email                  String?      @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  sentFriendRequests     Friendship[] @relation("sentRequests")
  receivedFriendRequests Friendship[] @relation("receivedRequests")
  sentMessages           Message[]    @relation("sender")
  receivedMessages       Message[]    @relation("recipient")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pokemon {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  height      Int
  weight      Int
  xp          Int
  image_url   String
  pokemon_url String
  abilities   Ability[]
  stats       Stat[]
  types       PokemonType[]
}

model Ability {
  id        Int     @id @default(autoincrement())
  name      String
  is_hidden Boolean
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId Int
}

model Stat {
  id        Int     @id @default(autoincrement())
  name      String
  base_stat Int
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId Int
}

model PokemonType {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId Int
}

model Friendship {
  id          String           @id @default(cuid())
  senderId    String
  recipientId String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt

  sender    User @relation("sentRequests", fields: [senderId], references: [id])
  recipient User @relation("receivedRequests", fields: [recipientId], references: [id])

  @@unique([senderId, recipientId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  senderId    String
  recipientId String
  sentAt      DateTime @default(now())

  sender    User @relation("sender", fields: [senderId], references: [id])
  recipient User @relation("recipient", fields: [recipientId], references: [id])
}
